knitr::opts_chunk$set(echo = TRUE)
attack <- function(mod, ac) {
if (!is.numeric(mod)) {
stop("Your input must be numbers!")
}
if (!is.numeric(ac)) {
stop("Your input must be numbers!")
}
if(length(mod) > 1) {
stop("Too many numbers!")
}
if(length(ac) > 1) {
stop("Too many numbers!")
}
if((sum(sample(1:20, 1)+mod)) >= ac)
print ("Hit!")
else
print ("Miss!")
}
#this is it working as intended
attack(0, 100)
attack(100, 10)
#here are some things that WON'T work and throw errors
attack("x", 10)
attack(10, "x")
attack(c(1,5), 15)
attack(10, 10, 10)
attack(ten, ten)
attack(0, 100)
attack(100, 10)
error= TRUE
attack("x", 10)
attack(10, "x")
error= TRUE
attack("x", 10)
error = TRUE
attack(c(1,5), 15)
attack(10, 10, 10)
(error = TRUE, attack(c(1,5), 15))
attack(c(1,5), 15)
attack(c(1,5), 15, error = TRUE)
attack(c(1,5), 15)
```{r, error= TRUE}
```{r, error=TRUE}
```{r, error = TRUE}
```{r, error=TRUE}
```{r error=TRUE}
attack("x", 10)
check(attack)
library(testthat)
check(attack)
library(devtools)
check(attack)
check(attack())
?check
expect_equal(attack(0, 100), "Miss!")
knitr::opts_chunk$set(echo = TRUE)
library(testthat)
library(tidyverse)
expect_equal(attack(0, 100), "Miss!")
expect_equal(attack(0, 100), "Hit!")
expect_equal(attack(100, 10), "Hit!")
expect_error(attack("x", 10)
expect_error(attack("x", 10))
expect_error(attack("x", 10))
attack("x", 10)
expect_error(attack(10, 10, 10))
expect_error(attack(ten, ten))
test_that(expect_error(attack(ten, ten)))
test_that("throws error", expect_error(attack(ten, ten)))
test_that("Misses work", expect_equal(attack(0, 100), "Miss!")
test_that("Misses work", expect_equal(attack(0, 100), "Miss!"))
test_that("Misses work", {expect_equal(attack(0, 100), "Miss!")})
test_that("Hits work", {expect_equal(attack(100, 10), "Hit!")})
test_that("Hits work", {expect_named(attack(100, 10), "Hit!")})
test_that("Hits work", {expect_equal(attack(100, 10), "Hit!")})
test_that(expect_no_error(attack(2, 15)))
class("hit!")
test_that(expect_no_error(attack(2, 15), class = character))
test_that(expect_no_error(attack(2, 15), class = chr))
test_that(expect_no_error(attack(2, 15), class = "character"))
test_that(expect_output(attack(2, 15))
test_that(expect_output(attack(2, 15)))
test_that(expect_output(attack(2, 15)))
expect_output(attack(2,15))
expect_output(attack(2, 15))
test_that("Does it print?" {expect_output(attack(2, 15))})
test_that("Does it print?", expect_output(attack(2, 15)))
test_that("throws error", expect_error(attack(10, 10, 10)))
test_that("throws error", expect_error(attack(ten, ten)))
knitr::opts_chunk$set(echo = TRUE)
suppressWarnings(library(testthat))
suppressPackageStartupMessages(suppressWarnings(library(tidyverse)))
#' D20 attack: Hit or miss?
#'
#' Enter an attack modifier,  enemy AC, and see if your attack hits or misses.
#' It "rolls" the 20 sided dice for you (by picking a random number from 1-20),
#' adds your modifier, and sees if that result is greater than
#' or equal to the enemy AC.
#'
#' @param mod (this is your attack modifier)
#' @param ac  (this is the enemy AC)
#'
#' @return Prints "hit!" or "miss!" depending on if the total "attack roll" is >= the AC of the "monster"
#'
attack <- function(mod, ac) {
if (!is.numeric(mod)) {
stop("Your input must be numbers!")
}
if (!is.numeric(ac)) {
stop("Your input must be numbers!")
}
if(length(mod) > 1) {
stop("Too many numbers!")
}
if(length(ac) > 1) {
stop("Too many numbers!")
}
if((sum(sample(1:20, 1)+mod)) >= ac)
print ("Hit!")
else
print ("Miss!")
}
test_that("Does it print?", expect_output(attack(2, 15)))
test_that("Misses work", {expect_equal(attack(0, 100), "Miss!")})
test_that("Hits work", {expect_equal(attack(100, 10), "Hit!")})
attack("x", 10)
attack(c(1,5), 15)
test_that("throws error", expect_error(attack(10, 10, 10)))
test_that("throws error", expect_error(attack(ten, ten)))
test(attack())
library(devtools)
test(attack()
suppressPackageStartupMessages(suppressWarnings(library(tidyverse)))
test(attack())
test()
knitr::opts_chunk$set(echo = TRUE)
suppressWarnings(library(testthat))
suppressPackageStartupMessages(suppressWarnings(library(tidyverse)))
#' D20 attack: Hit or miss?
#'
#' Enter an attack modifier,  enemy AC, and see if your attack hits or misses.
#' It "rolls" the 20 sided dice for you (by picking a random number from 1-20),
#' adds your modifier, and sees if that result is greater than
#' or equal to the enemy AC.
#'
#' @param mod (this is your attack modifier)
#' @param ac  (this is the enemy AC)
#'
#' @return Prints "hit!" or "miss!" depending on if the total "attack roll" is >= the AC of the "monster"
#'
attack <- function(mod, ac) {
if (!is.numeric(mod)) {
stop("Your input must be numbers!")
}
if (!is.numeric(ac)) {
stop("Your input must be numbers!")
}
if((sum(sample(1:20, 1)+mod)) >= ac)
print ("Hit!")
else
print ("Miss!")
}
test_that("Does it print?", expect_output(attack(2, 15)))
test_that("Misses work", {expect_equal(attack(0, 100), "Miss!")})
test_that("Hits work", {expect_equal(attack(100, 10), "Hit!")})
attack("x", 10)
test_that("throws error", expect_error(attack(10, 10, 10)))
test_that("throws error", expect_error(attack(ten, ten)))
create_package("C:/Users/the_f/Desktop/package")
library(devtools)
create_package("C:/Users/the_f/Desktop/package")
create_package("C:/Users/the_f/Documents/Dice_Package")
create_package("C:/Users/the_f/Desktop/DiceRoller")
library(devtools)
create_package("C:/Users/the_f/Desktop/DiceRoller")
library(devtools)
create_package("C:/Users/the_f/Desktop/DiceRoller")
here::dr_here()
create_package("C:/Users/the_f/Desktop/DiceRoller")
here::dr_here()
library(devtools)
create_package("C:/Users/the_f/Desktop/DiceRoller")
create_package("C:/Users/the_f/Desktop/DiceRoller")
library(devtools)
create_package("C:/Users/the_f/Desktop/DiceRoller")
here::dr_here()
library(devtools)
load_all()
attack(2,15)
check()
